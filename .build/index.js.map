{
  "version": 3,
  "sources": ["../index.ts"],
  "sourcesContent": ["// Welcome to\n// __________         __    __  .__                               __\n// \\______   \\_____ _/  |__/  |_|  |   ____   ______ ____ _____  |  | __ ____\n//  |    |  _/\\__  \\\\   __\\   __\\  | _/ __ \\ /  ___//    \\\\__  \\ |  |/ // __ \\\n//  |    |   \\ / __ \\|  |  |  | |  |_\\  ___/ \\___ \\|   |  \\/ __ \\|    <\\  ___/\n//  |________/(______/__|  |__| |____/\\_____>______>___|__(______/__|__\\\\_____>\n//\n// This file can be a nice home for your Battlesnake logic and helper functions.\n//\n// To get you started we've included code to prevent your Battlesnake from moving backwards.\n// For more info see docs.battlesnake.com\n\nimport runServer from './server';\nimport { GameState, InfoResponse, MoveResponse, Coord } from './types';\n\n// info is called when you create your Battlesnake on play.battlesnake.com\n// and controls your Battlesnake's appearance\n// TIP: If you open your Battlesnake URL in a browser you should see this data\n\n// Snake metadata\nfunction info(): InfoResponse {\n  console.log(\"INFO\");\n\n  return {\n    apiversion: \"1\",\n    author: \"\",       // TODO: Your Battlesnake Username\n    color: \"#888888\", // TODO: Choose color\n    head: \"default\",  // TODO: Choose head\n    tail: \"default\",  // TODO: Choose tail\n  };\n}\n\n// start is called when your Battlesnake begins a game\nfunction start(gameState: GameState): void {\n  console.log(\"GAME START\");\n}\n\n// end is called when your Battlesnake finishes a game\nfunction end(gameState: GameState): void {\n  console.log(\"GAME OVER\\n\");\n}\n\n\n// move is called on every turn and returns your next move\n// Valid moves are \"up\", \"down\", \"left\", or \"right\"\n// See https://docs.battlesnake.com/api/example-move for available data\nfunction move(gameState: GameState): MoveResponse {\n\n  let isMoveSafe: { [key: string]: boolean; } = {\n    up: true,\n    down: true,\n    left: true,\n    right: true\n  };\n\n  // We've included code to prevent your Battlesnake from moving backwards\n  const myHead = gameState.you.body[0];\n  const myNeck = gameState.you.body[1];\n\n  // Logic for not turning into itself\n  if (myNeck.x < myHead.x) {        // Neck is left of head, don't move left\n    isMoveSafe.left = false;\n  } else if (myNeck.x > myHead.x) { // Neck is right of head, don't move right\n    isMoveSafe.right = false;\n  } else if (myNeck.y < myHead.y) { // Neck is below head, don't move down\n    isMoveSafe.down = false;\n  } else if (myNeck.y > myHead.y) { // Neck is above head, don't move up\n    isMoveSafe.up = false;\n  }\n\n  // TODO: Step 1 - Prevent your Battlesnake from moving out of bounds\n  let boardWidth = gameState.board.width;\n  let boardHeight = gameState.board.height;\n\n  // LEFT OR RIGHT SIDE\n  // Has reached the left side of the board\n  switch (myHead.x) {\n    // If x is 0, head is on the left side of the board\n    case 0: {\n      isMoveSafe.left = false;\n      break;\n    }\n    // If x is 10, head is on the r side of the board\n    case boardWidth - 1: {\n      isMoveSafe.right = false;\n      break;\n    }\n    default: {\n      //statements; \n      break;\n    }\n  }\n\n  switch (myHead.y) {\n    // If y is 0, head is on the bottom of the board\n    case 0: {\n      isMoveSafe.down = false;\n      break;\n    }\n    // If y is 10, head is on the top of the board\n    case boardWidth - 1: {\n      isMoveSafe.up = false;\n      break;\n    }\n    default: {\n      //statements; \n      break;\n    }\n  }\n\n  // TODO: Step 2 - Prevent your Battlesnake from colliding with itself\n  let myBody = gameState.you.body;\n\n  // TODO: Step 3 - Prevent your Battlesnake from colliding with other Battlesnakes\n  // opponents = gameState.board.snakes;\n\n  // Are there any safe moves left?\n  const safeMoves = Object.keys(isMoveSafe).filter(key => isMoveSafe[key]);\n  console.log(safeMoves)\n  if (safeMoves.length == 0) {\n    console.log(`MOVE ${gameState.turn}: No safe moves detected! Moving down`);\n    return { move: \"down\" };\n  }\n\n  // Choose a random move from the safe moves\n  const nextMove = safeMoves[Math.floor(Math.random() * safeMoves.length)];\n\n  // Choose one of the safe moves\n  //console.log(safeMoves)\n\n  // TODO: Step 4 - Move towards food instead of random, to regain health and survive longer\n  // food = gameState.board.food;\n\n  console.log(`MOVE ${gameState.turn}: ${nextMove}`)\n\n  return { move: nextMove };\n}\n\nrunServer({\n  info: info,\n  start: start,\n  move: move,\n  end: end\n});\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAYA,oBAAsB;AAQtB,gBAA8B;AAC5B,UAAQ,IAAI;AAEZ,SAAO;AAAA,IACL,YAAY;AAAA,IACZ,QAAQ;AAAA,IACR,OAAO;AAAA,IACP,MAAM;AAAA,IACN,MAAM;AAAA;AAAA;AAKV,eAAe,WAA4B;AACzC,UAAQ,IAAI;AAAA;AAId,aAAa,WAA4B;AACvC,UAAQ,IAAI;AAAA;AAOd,cAAc,WAAoC;AAEhD,MAAI,aAA0C;AAAA,IAC5C,IAAI;AAAA,IACJ,MAAM;AAAA,IACN,MAAM;AAAA,IACN,OAAO;AAAA;AAIT,QAAM,SAAS,UAAU,IAAI,KAAK;AAClC,QAAM,SAAS,UAAU,IAAI,KAAK;AAGlC,MAAI,OAAO,IAAI,OAAO,GAAG;AACvB,eAAW,OAAO;AAAA,aACT,OAAO,IAAI,OAAO,GAAG;AAC9B,eAAW,QAAQ;AAAA,aACV,OAAO,IAAI,OAAO,GAAG;AAC9B,eAAW,OAAO;AAAA,aACT,OAAO,IAAI,OAAO,GAAG;AAC9B,eAAW,KAAK;AAAA;AAIlB,MAAI,aAAa,UAAU,MAAM;AACjC,MAAI,cAAc,UAAU,MAAM;AAIlC,UAAQ,OAAO;AAAA,SAER,GAAG;AACN,iBAAW,OAAO;AAClB;AAAA;AAAA,SAGG,aAAa,GAAG;AACnB,iBAAW,QAAQ;AACnB;AAAA;AAAA,aAEO;AAEP;AAAA;AAAA;AAIJ,UAAQ,OAAO;AAAA,SAER,GAAG;AACN,iBAAW,OAAO;AAClB;AAAA;AAAA,SAGG,aAAa,GAAG;AACnB,iBAAW,KAAK;AAChB;AAAA;AAAA,aAEO;AAEP;AAAA;AAAA;AAKJ,MAAI,SAAS,UAAU,IAAI;AAM3B,QAAM,YAAY,OAAO,KAAK,YAAY,OAAO,SAAO,WAAW;AACnE,UAAQ,IAAI;AACZ,MAAI,UAAU,UAAU,GAAG;AACzB,YAAQ,IAAI,QAAQ,UAAU;AAC9B,WAAO,EAAE,MAAM;AAAA;AAIjB,QAAM,WAAW,UAAU,KAAK,MAAM,KAAK,WAAW,UAAU;AAQhE,UAAQ,IAAI,QAAQ,UAAU,SAAS;AAEvC,SAAO,EAAE,MAAM;AAAA;AAGjB,2BAAU;AAAA,EACR;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA;",
  "names": []
}
